service: olga-backend

provider:
  name: aws
  runtime: go1.x
  stage: prod
  region: sa-east-1
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - s3:*
      Resource: '*'

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  go-lambda-create-user:
    handler: lambdas/bin/go-lambda-create-user
    ssmToEnvironment:
      - EMAIL_SENDER_ADDRESS
      - EMAIL_SENDER_PASSWORD
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
    events:
      - httpApi:
          path: /users
          method: post
      - cloudwatchLog: '/aws/lambda/go-lambda-create-user'
  go-lambda-get-all-users:
    handler: lambdas/bin/go-lambda-get-all-users
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER # Change to DB_HOST_READER when using read replica.
    events:
      - httpApi:
          path: /users
          method: get
      - cloudwatchLog: '/aws/lambda/go-lambda-get-all-users'
  go-lambda-update-card-limit:
    handler: lambdas/bin/go-lambda-update-card-limit
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
    events:
      - httpApi:
          path: /users/{user_id}/card/limit
          method: patch
      - cloudwatchLog: '/aws/lambda/go-lambda-update-card-limit'

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:

    ReceiptsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-${self:service}-receipts

    ### Aurora Serverless Cluster and Instance ###
    postgresCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        AllocatedStorage: 20
        DatabaseName: prodOlgaBackend
        Engine: postgres
        EngineVersion: "14.6"
        DBClusterInstanceClass: db.t4g.micro
        MasterUsername: ${ssm:/db_username}
        MasterUserPassword: ${ssm:/db_password}
    postgresInstance:
      Type: "AWS::RDS::DBInstance"
      Properties:
        PubliclyAccessible: true
        Engine: postgres
        DBInstanceClass: db.t4g.micro
        DBClusterIdentifier: !Ref postgresCluster
#    Add a read replica when need to scale up the database.
#    auroraReadReplica:
#      Type: "AWS::RDS::DBInstance"
#      Properties:
#        PubliclyAccessible: true
#        Engine: postgres
#        DBInstanceClass: db.t4g.micro
#        DBClusterIdentifier: !Ref postgresCluster

plugins:
  - serverless-domain-manager
  - serverless-ssm-fetch

custom:
  serverlessSsmFetch:
    EMAIL_SENDER_ADDRESS: /email_sender_address
    EMAIL_SENDER_PASSWORD: /email_sender_password
    DB_USER: /db_username
    DB_PASSWORD: /db_password
    DB_NAME: /db_name
    DB_HOST_WRITER: /db_host_writer_instance
    DB_HOST_READER: /db_host_reader_instance
  customDomain:
    domainName: 'api.olga.lat'
    basePath: 'api'
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: regional
    apiType: http

