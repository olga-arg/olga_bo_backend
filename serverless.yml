service: olga-backend

provider:
  name: aws
  runtime: provided.al2
  region: sa-east-1
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - s3:*
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminCreateUser
          Resource: ${self:custom.cognitoUserPoolArn.${sls:stage}}
        - Effect: 'Allow'
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - 'arn:aws:logs:sa-east-1:588257415519:log-group:dev-cuit-change:*'

# you can define service wide environment variables here
#  environment:
#    variable1: value1
package:
  individually: true

functions:
  go-lambda-create-company:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-create-company/go-lambda-create-company.zip
    ssmToEnvironment:
      - EMAIL_SENDER_ADDRESS
      - EMAIL_SENDER_PASSWORD
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /company
          method: post
  go-lambda-create-category:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-create-category/go-lambda-create-category.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /company/categories
          method: post
  go-lambda-create-user:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-create-user/go-lambda-create-user.zip
    ssmToEnvironment:
      - EMAIL_SENDER_ADDRESS
      - EMAIL_SENDER_PASSWORD
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /users
          method: post
  go-lambda-get-users:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-get-users/go-lambda-get-users.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /users
          method: get
  go-lambda-update-user:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-update-user/go-lambda-update-user.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /users/{user_id}
          method: patch
  go-lambda-update-payment:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-update-payment/go-lambda-update-payment.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /payments/{payment_id}
          method: patch
  go-lambda-create-team:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-create-team/go-lambda-create-team.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /teams
          method: post
  go-lambda-get-categories:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-get-categories/go-lambda-get-categories.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /company/categories
          method: get
  go-lambda-get-teams:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-get-teams/go-lambda-get-teams.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /teams
          method: get
  go-lambda-delete-team:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-delete-team/go-lambda-delete-team.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /teams/{team_id}
          method: delete
  go-lambda-update-team:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-update-team/go-lambda-update-team.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /teams/{team_id}
          method: patch
  go-lambda-create-payment:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-create-payment/go-lambda-create-payment.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /payments
          method: post
  go-lambda-get-payments:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-get-payments/go-lambda-get-payments.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /payments
          method: get
  go-lambda-me:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-me/go-lambda-me.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
      - USER_POOL_ID
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /me
          method: get
  python-lambda-scan-receipt:
    handler: handler.lambda_handler
    package: 
      artifact: lambdas/bin/python-lambda-scan-receipt/python-lambda-scan-receipt.zip
    environment:
      STAGE: ${sls:stage}
    timeout: 29
    runtime: python3.9
    events:
      - httpApi:
          path: /scan
          method: post
    role: PythonLambdaScanReceiptRole
    ssmToEnvironment:
      - S3_BUCKET
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
      - USER_POOL_ID
#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    Assets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${sls:stage}-${self:service}-assets
    PythonLambdaScanReceiptRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'PythonLambdaScanReceiptRole-${sls:stage}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'SSMAndLambdaExecution'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: 'arn:aws:logs:*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 'ssm:GetParameter'
                    - 'ssm:PutParameter'
                  Resource: '*'
                - Effect: 'Allow'
                  Action:
                    - 's3:GetObject'
                    - 's3:PutObject'
                    - 's3:ListBucket'
                  Resource:
                    - 'arn:aws:s3:::olga-backend-payments222643-dev/*'
                    - 'arn:aws:s3:::olga-backend-payments155150-prod/*'
                - Effect: 'Allow'
                  Action:
                    - cognito-idp:AdminGetUser
                    - cognito-idp:AdminCreateUser
                  Resource: ${self:custom.cognitoUserPoolArn.${sls:stage}}
    CuitChangeLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: ${sls:stage}-cuit-change

    ### Aurora Serverless Cluster and Instance ###
    #    postgresCluster:
    #      Type: AWS::RDS::DBCluster
    #      Properties:
    #        AllocatedStorage: 20
    #        DatabaseName: prodOlgaBackend
    #        Engine: postgres
    #        EngineVersion: "14.6"
    #        DBClusterInstanceClass: db.t4g.micro
    #        MasterUsername: ${ssm:/db_username}
    #        MasterUserPassword: ${ssm:/db_password}
    postgresInstance:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        DBInstanceIdentifier: ${sls:stage}-${self:service}-postgres
        PubliclyAccessible: true
        Engine: postgres
        EngineVersion: '14.6'
        DBInstanceClass: db.t4g.micro
        AllocatedStorage: 20
        DBName: ${ssm:/${sls:stage}/db_name}
        MasterUsername: ${ssm:/${sls:stage}/db_username}
        MasterUserPassword: ${ssm:/${sls:stage}/db_password}

#        DBClusterIdentifier: !Ref postgresCluster
#    Add a read replica when need to scale up the database.
#    auroraReadReplica:
#      Type: "AWS::RDS::DBInstance"
#      Properties:
#        PubliclyAccessible: true
#        Engine: postgres
#        DBInstanceClass: db.t4g.micro
#        DBClusterIdentifier: !Ref postgresCluster

plugins:
  - serverless-domain-manager
  - serverless-ssm-fetch
  - serverless-python-requirements

custom:
  serverlessSsmFetch:
    EMAIL_SENDER_ADDRESS: /email_sender_address
    EMAIL_SENDER_PASSWORD: /email_sender_password
    DB_USER: /${sls:stage}/db_username
    DB_PASSWORD: /${sls:stage}/db_password
    DB_NAME: /${sls:stage}/db_name
    DB_PORT: /db_port
    DB_HOST_WRITER: /${sls:stage}/db_host_writer_instance
    DB_HOST_READER: /${sls:stage}/db_host_reader_instance
    USER_POOL_ID: /${sls:stage}/user_pool_id
    S3_BUCKET: /${sls:stage}/s3_bucket_name
  customDomain:
    domainName: 'api.olga.lat'
    basePath: '${sls:stage}'
    stage: $default
    createRoute53Record: true
    endpointType: regional
    apiType: http
  cognitoUserPoolArn:
    dev: 'arn:aws:cognito-idp:us-east-1:588257415519:userpool/us-east-1_7Npn25c8F'
    prod: 'arn:aws:cognito-idp:us-east-1:588257415519:userpool/us-east-1_XL73TDAKs'
  pythonRequirements:
    requirementsFile: requirements.txt

configValidationMode: error
