service: olga-backend

provider:
  name: aws
  runtime: provided.al2
  stage: prod
  region: sa-east-1
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - s3:*
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - cognito-idp:AdminGetUser
      Resource: arn:aws:cognito-idp:us-east-1:588257415519:userpool/us-east-1_a3sLZtvFF

# you can define service wide environment variables here
#  environment:
#    variable1: value1
package:
  individually: true
  
functions:
  go-lambda-create-user:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-create-user/go-lambda-create-user.zip
    ssmToEnvironment:
      - EMAIL_SENDER_ADDRESS
      - EMAIL_SENDER_PASSWORD
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
    events:
      - httpApi:
          path: /users
          method: post
  go-lambda-get-users:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-get-users/go-lambda-get-users.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
    events:
      - httpApi:
          path: /users
          method: get
  go-lambda-update-user:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-update-user/go-lambda-update-user.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
    events:
      - httpApi:
          path: /users/{user_id}
          method: patch
  go-lambda-create-team:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-create-team/go-lambda-create-team.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
    events:
      - httpApi:
          path: /teams
          method: post
  go-lambda-get-teams:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-get-teams/go-lambda-get-teams.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
    events:
      - httpApi:
          path: /teams
          method: get
  go-lambda-delete-team:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-delete-team/go-lambda-delete-team.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
    events:
      - httpApi:
          path: /teams/{team_id}
          method: delete
  go-lambda-update-team:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-update-team/go-lambda-update-team.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
    events:
      - httpApi:
          path: /teams/{team_id}
          method: patch
  go-lambda-create-payment:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-create-payment/go-lambda-create-payment.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_WRITER
      - DB_PORT
      - USER_POOL_ID
      - S3_USER_AC
      - S3_USER_SAC
    events:
      - httpApi:
          path: /payments
          method: post
  go-lambda-get-payments:
    handler: bootstrap
    package:
      artifact: lambdas/bin/go-lambda-get-payments/go-lambda-get-payments.zip
    ssmToEnvironment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST_READER
      - DB_PORT
    events:
      - httpApi:
          path: /payments
          method: get

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    ReceiptsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-${self:service}-receipts

    ### Aurora Serverless Cluster and Instance ###
    #    postgresCluster:
    #      Type: AWS::RDS::DBCluster
    #      Properties:
    #        AllocatedStorage: 20
    #        DatabaseName: prodOlgaBackend
    #        Engine: postgres
    #        EngineVersion: "14.6"
    #        DBClusterInstanceClass: db.t4g.micro
    #        MasterUsername: ${ssm:/db_username}
    #        MasterUserPassword: ${ssm:/db_password}
    postgresInstance:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        DBInstanceIdentifier: ${self:provider.stage}-${self:service}-postgres
        PubliclyAccessible: true
        Engine: postgres
        EngineVersion: '14.6'
        DBInstanceClass: db.t4g.micro
        AllocatedStorage: 20
        DBName: ${ssm:/db_name}
        MasterUsername: ${ssm:/db_username}
        MasterUserPassword: ${ssm:/db_password}

#        DBClusterIdentifier: !Ref postgresCluster
#    Add a read replica when need to scale up the database.
#    auroraReadReplica:
#      Type: "AWS::RDS::DBInstance"
#      Properties:
#        PubliclyAccessible: true
#        Engine: postgres
#        DBInstanceClass: db.t4g.micro
#        DBClusterIdentifier: !Ref postgresCluster

plugins:
  - serverless-domain-manager
  - serverless-ssm-fetch

custom:
  serverlessSsmFetch:
    EMAIL_SENDER_ADDRESS: /email_sender_address
    EMAIL_SENDER_PASSWORD: /email_sender_password
    DB_USER: /db_username
    DB_PASSWORD: /db_password
    DB_NAME: /db_name
    DB_PORT: /db_port
    DB_HOST_WRITER: /db_host_writer_instance
    DB_HOST_READER: /db_host_reader_instance
    S3_USER_AC: /s3userak
    S3_USER_SAC: /s3usersak
    USER_POOL_ID: /user_pool_id
  customDomain:
    domainName: 'api.olga.lat'
    basePath: 'api'
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: regional
    apiType: http
